// Package specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package specs

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ErrorSchema defines model for ErrorSchema.
type ErrorSchema struct {
	Message string `json:"message"`
}

// IdPath defines model for IdPath.
type IdPath = string

// GetAllResponse defines model for GetAllResponse.
type GetAllResponse = []map[string]interface{}

// GetDetailsResponse defines model for GetDetailsResponse.
type GetDetailsResponse = map[string]interface{}

// Http400ErrorResponse defines model for Http400ErrorResponse.
type Http400ErrorResponse = ErrorSchema

// Http404ErrorResponse defines model for Http404ErrorResponse.
type Http404ErrorResponse = ErrorSchema

// Http500ErrorResponse defines model for Http500ErrorResponse.
type Http500ErrorResponse = ErrorSchema

// HierarchyRequest defines model for HierarchyRequest.
type HierarchyRequest struct {
	Upline *float32 `json:"upline,omitempty"`
	Value  *string  `json:"value,omitempty"`
}

// AddJSONBody defines parameters for Add.
type AddJSONBody struct {
	Upline *float32 `json:"upline,omitempty"`
	Value  *string  `json:"value,omitempty"`
}

// EditJSONBody defines parameters for Edit.
type EditJSONBody struct {
	Upline *float32 `json:"upline,omitempty"`
	Value  *string  `json:"value,omitempty"`
}

// AddJSONRequestBody defines body for Add for application/json ContentType.
type AddJSONRequestBody AddJSONBody

// EditJSONRequestBody defines body for Edit for application/json ContentType.
type EditJSONRequestBody EditJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /hierarchy)
	GetAll(ctx echo.Context) error

	// (POST /hierarchy)
	Add(ctx echo.Context) error

	// (DELETE /hierarchy/{id})
	Delete(ctx echo.Context, id IdPath) error

	// (GET /hierarchy/{id})
	GetDetails(ctx echo.Context, id IdPath) error

	// (PATCH /hierarchy/{id})
	Edit(ctx echo.Context, id IdPath) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAll converts echo context to params.
func (w *ServerInterfaceWrapper) GetAll(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAll(ctx)
	return err
}

// Add converts echo context to params.
func (w *ServerInterfaceWrapper) Add(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Add(ctx)
	return err
}

// Delete converts echo context to params.
func (w *ServerInterfaceWrapper) Delete(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Delete(ctx, id)
	return err
}

// GetDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDetails(ctx, id)
	return err
}

// Edit converts echo context to params.
func (w *ServerInterfaceWrapper) Edit(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id IdPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Edit(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/hierarchy", wrapper.GetAll)
	router.POST(baseURL+"/hierarchy", wrapper.Add)
	router.DELETE(baseURL+"/hierarchy/:id", wrapper.Delete)
	router.GET(baseURL+"/hierarchy/:id", wrapper.GetDetails)
	router.PATCH(baseURL+"/hierarchy/:id", wrapper.Edit)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWT0/cPhD9KtH8fkeLbNvlkhsICntoi6A3tAdjDxsjx3btCeoK+btXdrKbhWQlSlsh",
	"0d6SyYzfm3/PeQBhG2cNGgpQPYDjnjdI6PPbQl5wqtOTMlCBSy8MDG8QKlASGHj81iqPEiryLTIIosaG",
	"pwhau+QVyCuzghhj54yBjq1UmM8/V+i5F/X6svuSbMIaQpMfuXNaCU7KmvIuWJNsA4Dz1qGn/qjWaWVw",
	"B9i0zQ16iAzuuW5xihLbWOzNHQoaSA4ZdZbgrAkdzhnSkdaXvemnCCvCJuzw2KBuaXDv+bpjITEIr1w6",
	"CSpIPmdIJ0hc6fAi8IlMxxjnRG4+m516b/2LUP73eAsV/FcOU1V2X0OZT73qXCfwj7ks+jEosutAaP4q",
	"hD5bKj7a1sjHdA5fqT4LQ+gN18UV+nv0G1Jxs3N5snbPGK1IgyHwVSaM33njdJ45U2AKKqwQbRp7NrEm",
	"w05cb09ZTm6PMrc2AWglsC9OLxefFl/zqCvKuGdWc7MqTjjxL6Y4uljkvJTA4rTnxuAefeiSf3cwO5il",
	"cOvQcKeggg/ZxLIo5fTKeqMm6W2FuR0p/9yMhUygeXnhyUq/n8329WbrVz7Z+8hg/pywyY3KwfPnBs9H",
	"wYfPRR7NatY8vgqpkVvxhWVk4GyYKNiR3Ih8p9vr/bg70l6OdD2+sORPFe+NlT2ynaktH5SMCUCiRsJx",
	"M046O3t0SV9PExpcyv4Sj8vpHuzRiO36s/F19bYmf59S9LP3u+v9t898VmxRj0t+KhX9WrH/qdSfUan0",
	"j5F/OrqWtF5DBTWRq8pSW8F1nS6PuIw/AgAA///+JvndTgwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
